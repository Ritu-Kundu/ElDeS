#
# TODO: Make libsdl a module
#

CC := g++
# Define source-code directory 
SRCDIR := ../src

# Define build directory (for storing object files: will be removed on clean) 
BUILDDIR := ../build

# Define test source-code directory 
TESTSRCDIR := src

# Define test build directory (for storing object files: will be removed on clean) 
TESTBUILDDIR := build


# Define executable name 
TARGET := bin/mytests
 
# Define libraries
SDSL_DIR := ../external/sdsl-lite
GTEST_DIR := ../external/gtest
LIB := -L$(GTEST_DIR)/lib -lgtest -lgtest_main -lpthread -L$(SDSL_DIR)/lib/ -lsdsl -ldivsufsort -ldivsufsort64 -Wl,-rpath=$(PWD)/$(GTEST_DIR)/lib

# Define include files (header <> file paths)
INC := -I ../include -I $(SDSL_DIR)/include/ -I $(GTEST_DIR)/include/

# Define files to be tested
FILES := Parser Elastic_string util Search qsufsort
 
# 
# No need to edit below this line 
#
 
# Define source files
SRCEXT := cpp
SOURCES := $(patsubst %,$(SRCDIR)/%.$(SRCEXT),$(FILES))
TESTSOURCES := $(shell find $(TESTSRCDIR) -type f -name *.$(SRCEXT))

# Define object files
OBJECTS := $(patsubst $(SRCDIR)/%,$(BUILDDIR)/%,$(SOURCES:.$(SRCEXT)=.o))
TESTOBJECTS := $(patsubst $(TESTSRCDIR)/%,$(TESTBUILDDIR)/%,$(TESTSOURCES:.$(SRCEXT)=.o))


CFLAGS := -g -std=c++11 -D_USE_32 -msse3 -fopenmp -O3 -fomit-frame-pointer -funroll-loops -fPIC
LFLAGS= -O3 --shared -DNDEBUG -Wl,-V

# Main entry point
#
all: $(TARGET) 

# For linking object file(s) to produce the executable
#
$(TARGET): $(OBJECTS) $(TESTOBJECTS)
	@echo "============"
	@echo " Linking..."
	$(CC) $^ -o $(TARGET) $(LFLAG) $(LIB)
	@echo "============"

# For generating dependency
DEPS := $(OBJS:.o=.d)

-include $(DEPS)

# For compiling source file(s)
#
$(BUILDDIR)/%.o: $(SRCDIR)/%.$(SRCEXT)
	@mkdir -p $(BUILDDIR)
	@echo "============"
	@echo "Compiling $<"
	$(CC) $(CFLAGS) $(INC) -MM -MT $@ -MF $(patsubst %.o,%.d,$@) $<
	@echo " $(CC) $(CFLAGS) $(INC) -c -o $@ $<"; $(CC) $(CFLAGS) $(INC) -c -o $@ $<

# For compiling test source file(s)
#
$(TESTBUILDDIR)/%.o: $(TESTSRCDIR)/%.$(SRCEXT)
	@mkdir -p $(TESTBUILDDIR)
	@echo "============"
	@echo "Compiling $<"
	@echo " $(CC) $(CFLAGS) $(INC) -c -o $@ $<"; $(CC) $(CFLAGS) $(INC) -c -o $@ $<

 
# For cleaning up the project and test
#
clean:
	@echo " Cleaning...";
	@echo " $(RM) -r $(BUILDDIR) $(TARGET) $(DEPS)"; $(RM) -r $(BUILDDIR) $(TARGET) $(DEPS)
	@echo " $(RM) -r $(TESTBUILDDIR) $(TARGET) $(DEPS)"; $(RM) -r $(TESTBUILDDIR) $(TARGET) $(DEPS)

clean-all: 
	@echo " Cleaning all..."; 
	@echo " $(RM) -r $(BUILDDIR) $(TARGET) $(DEPS)"; $(RM) -r $(BUILDDIR) $(TARGET) $(DEPS)
	@echo " $(RM) -r $(TESTBUILDDIR) $(TARGET) $(DEPS)"; $(RM) -r $(TESTBUILDDIR) $(TARGET) $(DEPS)

#%::
#	-echo "Make can't find $$(pwd)$@!!!"

